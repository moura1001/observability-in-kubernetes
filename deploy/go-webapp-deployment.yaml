apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app-1
  template:
    metadata:
      labels:
        app: go-web-app-1
    spec:
      containers:
        - name: go-web-app-1
          image: go_web_app
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: go-web-app-1
spec:
  selector:
    app: go-web-app-1
  ports:
  - protocol: TCP
    port: 8091
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app-2
  template:
    metadata:
      labels:
        app: go-web-app-2
    spec:
      containers:
        - name: go-web-app-2
          image: go_web_app
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: go-web-app-2
spec:
  selector:
    app: go-web-app-2
  ports:
  - protocol: TCP
    port: 8092
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app-3
  template:
    metadata:
      labels:
        app: go-web-app-3
    spec:
      containers:
        - name: go-web-app-3
          image: go_web_app
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: go-web-app-3
spec:
  selector:
    app: go-web-app-3
  ports:
  - protocol: TCP
    port: 8093
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    # Configuração do Nginx como balanceador de carga
    worker_processes 1;

    events {
      worker_connections 1024;
    }

    http {
      upstream go-services {
        server go-web-app-1:8091;
        server go-web-app-2:8092;
        server go-web-app-3:8093;
      }

      server {
        listen 80;
        server_name example.com;

        location ~ ^/(endpoint1|endpoint2) {
          proxy_pass http://go-services;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
